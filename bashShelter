#! /bin/bash 
# config="$HOME/.config/shelter/"
# encryptedFile="$HOME/.config/shelter_p"
encryptedFileName="shelter.tar.gpg"
encryptedFileLocation="/media/veracrypt1"
# encryptedFileName="xD"
# encryptedFileLocation="/home/randomguy90"
encryptedFile="$encryptedFileLocation/$encryptedFileName"
# where to temporarily unpack?
configDir="$HOME/.config"
# tmp file name
configFileName="shelter"
# name of unpacked file
config="$configDir/$configFileName"
PWD=`pwd`

trap appExit EXIT

function echoDeb {
	if [[ $debug == 1 ]]; then
		echo $@
	fi
}
function cut_slash {
	local tmp=$1

	if [[ "${tmp: -1}" == "/" ]]; then
		tmp=${tmp:0:${#tmp}-1}
	
	fi

	echo $tmp
}
function add_slash {
	local arg=$1
	if ! [[ "${arg: -1}" == "/" ]]; then
			arg=$arg/
	fi
	echo $arg
}

function import_keys {

	if ! [[ $S_KEYS_LOCATION = "" ]] && ! [[ $P_KEYS_LOCATION = "" ]]; then
		if [[ -a ~/.gnupg/private-keys-v1.dXX ]]; then
			rm -r ~/.gnupg/private-keys-v1.dXX 2>/dev/null
		fi
		if [[ -a ~/.gnupg/pubring.kbxXX ]]; then
			rm -r ~/.gnupg/pubring.kbxXX 2>/dev/null
		fi		
		mv ~/.gnupg/private-keys-v1.d ~/.gnupg/private-keys-v1.dXX 2>/dev/null
		cp -r $S_KEYS_LOCATION ~/.gnupg/private-keys-v1.d 2>/dev/null		
		
		mv ~/.gnupg/pubring.kbx ~/.gnupg/pubring.kbxXX 2>/dev/null
		cp -r $P_KEYS_LOCATION ~/.gnupg/pubring.kbx 2>/dev/null		

	fi
}

function wipe_keys {
	if ! [[ $S_KEYS_LOCATION = "" ]] && ! [[ $P_KEYS_LOCATION = "" ]]; then
		rm -r ~/.gnupg/private-keys-v1.d 2>/dev/null
		mv ~/.gnupg/private-keys-v1.dXX ~/.gnupg/private-keys-v1.d 2>/dev/null

		rm -r ~/.gnupg/pubring.kbx 2>/dev/null
		mv ~/.gnupg/pubring.kbxXX ~/.gnupg/pubring.kbx 2>/dev/null
	fi
}

function encrypt {
	cd $configDir
	tar -cvf $configFileName.tar $configFileName 2>&1 1>/dev/null
	if ! [[ $recip == "" ]]; then
		
		err=`gpg --encrypt -r $recip --output $configFileName.tar.gpg  $configFileName.tar`		

	else
		err=`gpg -c --output $configFileName.tar.gpg  $configFileName.tar`		

	fi

	mv $config.tar.gpg $encryptedFile
	rm $configFileName.tar
	cd $PWD
	echo $err
}

function decrypt {
	cd $configDir
	cp -r $encryptedFile $config.tar.gpg

	err=`gpg --decrypt  --output $configFileName.tar $configFileName.tar.gpg 2>&1 1>/dev/null`

	tar -xvf $configFileName.tar 2>&1 1>/dev/null
	rm $configFileName.tar
	rm $configFileName.tar.gpg
	cd $PWD
	echo $err
}

function helpMsg(){
	echo "./bashShelter shelterName login"	
	echo "	ls|list 			list directories"
	echo "	rm|del {shelterName} 		delete shelted/file"
	echo "	create {shelterName}	 	create shelter"
	echo "	add {shelter} {f} {pass}"
	echo "		shelter - shelterName"
	echo "		f - filename"
	echo "		pass - password to encrypt"
	echo "	-d   debug mode"
	echo "	-h|--help|?			show this message"
	echo "	-k /private/key"
	echo "	-f /encrypted/file"
}
 
function appExit {
	tree2=`ls -R $config 2>/dev/null`

	if ! [[ -a $encryptedFile ]]; then
		echo exiting
	
	fi

	if [[ $tree1 != $tree2 ]]; then
		res=""

		read  -e -p "want to save? y/N:  " res

		if [[ $res == "N" || $res == "n" ]]; then
			echo "aborting"
		else
			saveFile
		fi

	fi
	rm -r $config 1>&2 2>/dev/null

	gpgconf --kill all
	

	exit 0
}

function saveFile {
	{
		cp $encryptedFile "$configDir/.$encryptedFileName""_0"
	
		for (( i = 1; i <= 6; i++ )); do
			if [[ $i == 6 ]]; then
				setBackup
				break
			fi	
			
			echo "$i/5 attempt"
			if [[ $i == 5 ]]; then
				echo "last attempt!!"
			fi
			
			#try
			{	
				if [[ $recip == "" ]]; then
					encrypt
				else
					import_keys
					encrypt $recip
					echoDeb $err
					if ! [[ -a $encryptedFile ]]; then
						echoDeb BAKAP
						setBackup
					fi
					wipe_keys
					break
				fi
				if [[ $err == *"gpgconf --kill all"*  ]]; then
					echoDeb $err
				fi
				
				if ! [[ $err ]];then
					break;
				fi
				
			#except
			}||{
				echo "failed"
				

			}
		done

		rm	"$configDir/.$encryptedFileName""_0"

		
	}||{
		echo "password input failed, try again."
		echo "saving error"
	}
}

function setBackup {
	remove=0
	mv "$configDir/.$encryptedFileName""_0" $encryptedFile
}



function clipboard(){

	passwd=`cat $1`

	if [[ $passwd == "" ]]; then
		echo "cannot read content of the file"
		
	else

			printf "%s" $passwd | xclip -sel clip 2>/dev/null
			res=`xclip -o -sel clip 2>&1`
			if [[ $res == " " ]]; then
				echo LOOOL
				res=`echo $passwd | xclip -sel clip2>&1`				
			fi
			
			if [[ $res == *"null"* ]];then
				echo "cannot copy to clipboard"
				read  -e -p "Do you want to show password?: y/N:  " save
				if [[ $save == "y" ]] || [[ $save == "Y" ]]; then
					echo $passwd
					sleep 3
					printf "\033[2A"
					echo 
				fi
			fi

			printf "%b%s%b\n" "\u001b[32;1m" "<-- copied -->" "\u001b[0m"
		
	fi
	passwd=""
}


function printout(){
	# ls $config/$arg1 1>/dev/null 2>/dev/null || gpg=1
	echoDeb tmplistIN$tmplist

	if [[ "${arg1: -1}" == "/" ]]; then
			arg1=${arg1:0:${#arg1}-1}
			echoDeb $arg1		
	fi
	res=""
	res=`ls -d $config/*  2>/dev/null| grep $arg1 2>/dev/null`
	echoDeb "ls -d $config/*  2>/dev/null| grep $arg1 2>/dev/null"
	if [[ $res == "" ]]; then
		res=`ls -d $config/$arg1*  2>/dev/null| grep $arg1 2>/dev/null`
		echoDeb "ls -d $config/$arg1*  2>/dev/null| grep $arg1 2>/dev/null"
	fi

	tmpLen=${#config}

	count=0
	echoDeb COUNT
	for elem in $res
	do
		echoDeb $elem
		count=$(( count+1 ))
	done
	# unset $count

	if [[ $count > 1 ]]; then
		echoDeb MORE
		for elem in $res
		do
			elem=${elem:$tmpLen+1}
			if [[ -d $config/$elem ]]; then
				printf "%b%s%b " "\u001b[34;1m" "$elem" "\u001b[0m" 
			elif [[ -f $config/$elem ]]; then
				printf "%b%s%b " "\u001b[33;1m" "$elem" "\u001b[0m"
			fi
	
		done
		printf "\n"

	elif [[ $count == 0 ]]; then
		clipboard $tmplist
		tmplist=" "

	elif [[ $count == 1 ]];then
		echoDeb ls
		echoDeb "ls ${res}"
		listElem=`ls ${res}`
		if [[ -f $listElem ]]; then
			clipboard $listElem
		else
			for elem in $listElem
			do
				echoDeb $elem
				if [[ $elem == *$res*  ]]; then
					file=$elem
				else
					file=$res/$elem
				fi

				if [[ -d $file ]]; then
					printf "%b%s %s %b\n" "\u001b[34;1m" "-->" $elem "\u001b[0m"	
				elif [[ -f $file ]]; then
					printf "%b%s %s %b\n" "\u001b[33;1m" "-->" $elem "\u001b[0m"
				fi
			done	
			echoDeb ONE		
			echoDeb $cwd
			cwd=${res:$tmpLen+1:${#res}}
			echoDeb $cwd
			arg1=$cwd	
		fi
		
	else
		echoDeb LOL 
	fi
	
}


function no_argv(){
	list=`ls -w 1 $config 2>/dev/null` 
	for elem in $list
		do
			if [[ -d $config/$elem ]]; then
					printf "%b%s %s %b\n" "\u001b[34;1m" "-->" $elem "\u001b[0m"
				else
					printf "%b%s %s %b\n" "\u001b[33;1m" "-->" $elem "\u001b[0m"
				fi
		done
}

function autocomplete {

		for word in ${tmplist}; do
			word=${word##/*/}
				if [[  $word == *$arg1*  ]]; then
					echo $word
				fi
			done
		

}


function list_shelters(){
	arg1=$1
	arg1=$(cut_slash $arg1)

	arg1="${1//[>]/ / }"

	listAll=`ls  -w 1 $config 2>/dev/null`

	if [[ $arg1 ]];then
		tmplist=`ls -w 1 $config/$arg1 2>/dev/null`

		# cwd=${arg1}

		if [[ $tmplist == "" ]]; then
			tmp=/$(cut_slash $cwd)
			tmplist=`ls -w 1 -d $config$tmp/* 2>/dev/null | grep /$arg1 `

			declare -a returnArr=()
			for elem in $tmplist;do
			 	elem=/${elem:${#config}+1:${#elem}}
			 	tmplist+=($elem)
			done
			
		fi
		
		if [[ $tmplist == "" ]]; then
			if [[ $listAll == *$arg1* ]]; then
				printf "%b %s %b \n" "\033[31;1m" "<----  $arg1 is empty ---->" "\u001b[0m"
				arg1=""

				
			else
				printf "%b %s %b \n" "\033[31;1m" "<---- $arg1 not found ---->" "\u001b[0m"
				arg1=""
			fi



		fi
		if ! [[ $tmplist == "" ]]; then
			printout
		fi
	else
		no_argv

	fi

	if ! [[ ${#cwd} = 0 ]]; then
		cwd=$(add_slash $cwd)
	fi
}

function createShelter(){
	local array=("$@")
	array=("${array[@]:1}") 

	lol=$(list_shelters $array)

	if [[ $lol == *"not found"* ]]; then
		mkdir $config/$array
	else
		echo '<---- '$array' already exists ---->' 
	fi
	unset $array
	list_shelters

}

function addPasswords(){
	local array=("$@")
	shelter=("${array[1]}") 
	array=("${array[@]:2}") 

	for i in ${!array[@]}
		do
			if !(( i%2  )); then
				echo ${array[i+1]} > $config/$shelter/${array[i]}
			fi
		done
	unset $array
}
function delete(){
	
	local array=("$@")
	array=("${array[@]:1}") 

	for i in ${!array[@]}
		do
			if !(( i%2  )); then
				rm -r $config/${array[i]}
			fi

		done
	unset $array
}


function shell {
	cd $config
	local xD=$@
	local lol="${xD:2:${#xD}}"
	local res=`$lol`
	echoDebv $res

}



cwd=""
recip=""
S_KEYS_LOCATION=""
P_KEYS_LOCATION=""
debug=0
SHELL=1

if [[ $1 == *"-h"* ]]; then
	helpMsg;exit 0
fi
while getopts s:p:d:h:f: flag
do
	case "${flag}" in 
		# r)recip=${OPTARG};;
		s)S_KEYS_LOCATION=${OPTARG};;
		p)P_KEYS_LOCATION=${OPTARG};;
		d)debug=1
		printf "%b%s%b\n" "\e[0;31m" "DEBUG MODE" "\e[0m"
		;;
		f)encryptedFile=${OPTARG} ;;
		h)
			;;
		
	esac
done


encryptedFile=`readlink -f $encryptedFile`

echo "File: $encryptedFile"
if ! [[ -a $encryptedFile ]]; then
	echo "Encrypted file not found "
	exit 0
fi

import_keys
err=$(decrypt)


echoDeb $err

wipe_keys

err=`echo $err | sed 's/^.* \([^@ ]\+@[^ ]\+\) \?.*$/\1/'`
if [[ $err == *"<"*"@"*">"* ]]; then
	recip=${err:1:${#err}-3}
	if [[ $S_KEYS_LOCATION = "" ]] ; then
		echo "NO PRIVATE KEYS FOUND"
		exit 0
	fi
	printf "%s %s\n" "Decrypted with:" "$recip"

elif ! [[ $err = " " ]]; then
	printf "%s %s\n" "Decrypted with:" "password"
fi

if ! [[ -a $config ]];then
	echo "Could not decrypt $encryptedFile"
	exit 0
fi

tree1=`ls -R $config`


if ! [[ -e $config ]];then
	mkdir -p ~/.shelter
fi

list=`ls -w 1 $config 2>/dev/null` 

if [[ $1 != "" ]] && [[ $1 != *"-"* ]]; then
	case $1 in
		*/*)
			printout $1
			exit 0
			;;
		*)
			list_shelters $1
			exit 0
			;;
	esac

	if [[ $2 != ""  ]]; then
		echo $1
		list_shelters $1/$2
		exit 0
	fi
fi


if [[ $SHELL || $1 == "" || $debug == 1 ]]; then	
	while [[ 1 ]]; do
		
		read  -e -p "shelter>" -i "$cwd" com

		if [[ $com == "" ]];then
			cwd=""
		fi

		case $com in
			..*)
				shell $com
			;;
			create* |cr*)
				createShelter $com
				;;
			rm*|del* )
				delete $com
				;;
			add*|ad*)
				addPasswords $com
				;;

			l*| list*| ls*)
				list_shelters ""
				;;

			exit|q)
				exit 0
				;;
			
			-h|--help|?)
				helpMsg
			;;
			*)
				list_shelters $com
				;;
		esac

	done
fi

